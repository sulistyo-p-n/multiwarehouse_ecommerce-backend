/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.multiwarehouse.app.kafka.inventory.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InventoryChangeAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1821723786255475245L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InventoryChangeAvroModel\",\"namespace\":\"com.multiwarehouse.app.kafka.inventory.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"inventoryId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"warehouseId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"active\",\"type\":\"boolean\"},{\"name\":\"productStocks\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductStockChangeAvroModel\",\"fields\":[{\"name\":\"ProductStockId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"quantity\",\"type\":\"int\"}]}}},{\"name\":\"actionType\",\"type\":{\"type\":\"enum\",\"name\":\"ActionType\",\"symbols\":[\"DEFAULT\",\"CREATED\",\"UPDATED\",\"SOFT_DELETED\",\"HARD_DELETED\"]}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<InventoryChangeAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InventoryChangeAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InventoryChangeAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InventoryChangeAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InventoryChangeAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InventoryChangeAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InventoryChangeAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InventoryChangeAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InventoryChangeAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID inventoryId;
  private java.util.UUID warehouseId;
  private boolean active;
  private java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> productStocks;
  private com.multiwarehouse.app.kafka.inventory.avro.model.ActionType actionType;
  private java.time.Instant createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InventoryChangeAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param inventoryId The new value for inventoryId
   * @param warehouseId The new value for warehouseId
   * @param active The new value for active
   * @param productStocks The new value for productStocks
   * @param actionType The new value for actionType
   * @param createdAt The new value for createdAt
   */
  public InventoryChangeAvroModel(java.util.UUID id, java.util.UUID inventoryId, java.util.UUID warehouseId, java.lang.Boolean active, java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> productStocks, com.multiwarehouse.app.kafka.inventory.avro.model.ActionType actionType, java.time.Instant createdAt) {
    this.id = id;
    this.inventoryId = inventoryId;
    this.warehouseId = warehouseId;
    this.active = active;
    this.productStocks = productStocks;
    this.actionType = actionType;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return inventoryId;
    case 2: return warehouseId;
    case 3: return active;
    case 4: return productStocks;
    case 5: return actionType;
    case 6: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: inventoryId = (java.util.UUID)value$; break;
    case 2: warehouseId = (java.util.UUID)value$; break;
    case 3: active = (java.lang.Boolean)value$; break;
    case 4: productStocks = (java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel>)value$; break;
    case 5: actionType = (com.multiwarehouse.app.kafka.inventory.avro.model.ActionType)value$; break;
    case 6: createdAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'inventoryId' field.
   * @return The value of the 'inventoryId' field.
   */
  public java.util.UUID getInventoryId() {
    return inventoryId;
  }


  /**
   * Sets the value of the 'inventoryId' field.
   * @param value the value to set.
   */
  public void setInventoryId(java.util.UUID value) {
    this.inventoryId = value;
  }

  /**
   * Gets the value of the 'warehouseId' field.
   * @return The value of the 'warehouseId' field.
   */
  public java.util.UUID getWarehouseId() {
    return warehouseId;
  }


  /**
   * Sets the value of the 'warehouseId' field.
   * @param value the value to set.
   */
  public void setWarehouseId(java.util.UUID value) {
    this.warehouseId = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'productStocks' field.
   * @return The value of the 'productStocks' field.
   */
  public java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> getProductStocks() {
    return productStocks;
  }


  /**
   * Sets the value of the 'productStocks' field.
   * @param value the value to set.
   */
  public void setProductStocks(java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> value) {
    this.productStocks = value;
  }

  /**
   * Gets the value of the 'actionType' field.
   * @return The value of the 'actionType' field.
   */
  public com.multiwarehouse.app.kafka.inventory.avro.model.ActionType getActionType() {
    return actionType;
  }


  /**
   * Sets the value of the 'actionType' field.
   * @param value the value to set.
   */
  public void setActionType(com.multiwarehouse.app.kafka.inventory.avro.model.ActionType value) {
    this.actionType = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new InventoryChangeAvroModel RecordBuilder.
   * @return A new InventoryChangeAvroModel RecordBuilder
   */
  public static com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder newBuilder() {
    return new com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder();
  }

  /**
   * Creates a new InventoryChangeAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InventoryChangeAvroModel RecordBuilder
   */
  public static com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder newBuilder(com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder other) {
    if (other == null) {
      return new com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder();
    } else {
      return new com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new InventoryChangeAvroModel RecordBuilder by copying an existing InventoryChangeAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new InventoryChangeAvroModel RecordBuilder
   */
  public static com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder newBuilder(com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel other) {
    if (other == null) {
      return new com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder();
    } else {
      return new com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for InventoryChangeAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InventoryChangeAvroModel>
    implements org.apache.avro.data.RecordBuilder<InventoryChangeAvroModel> {

    private java.util.UUID id;
    private java.util.UUID inventoryId;
    private java.util.UUID warehouseId;
    private boolean active;
    private java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> productStocks;
    private com.multiwarehouse.app.kafka.inventory.avro.model.ActionType actionType;
    private java.time.Instant createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.inventoryId)) {
        this.inventoryId = data().deepCopy(fields()[1].schema(), other.inventoryId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.warehouseId)) {
        this.warehouseId = data().deepCopy(fields()[2].schema(), other.warehouseId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.active)) {
        this.active = data().deepCopy(fields()[3].schema(), other.active);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.productStocks)) {
        this.productStocks = data().deepCopy(fields()[4].schema(), other.productStocks);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.actionType)) {
        this.actionType = data().deepCopy(fields()[5].schema(), other.actionType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing InventoryChangeAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inventoryId)) {
        this.inventoryId = data().deepCopy(fields()[1].schema(), other.inventoryId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.warehouseId)) {
        this.warehouseId = data().deepCopy(fields()[2].schema(), other.warehouseId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.active)) {
        this.active = data().deepCopy(fields()[3].schema(), other.active);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productStocks)) {
        this.productStocks = data().deepCopy(fields()[4].schema(), other.productStocks);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.actionType)) {
        this.actionType = data().deepCopy(fields()[5].schema(), other.actionType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'inventoryId' field.
      * @return The value.
      */
    public java.util.UUID getInventoryId() {
      return inventoryId;
    }


    /**
      * Sets the value of the 'inventoryId' field.
      * @param value The value of 'inventoryId'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setInventoryId(java.util.UUID value) {
      validate(fields()[1], value);
      this.inventoryId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryId' field has been set.
      * @return True if the 'inventoryId' field has been set, false otherwise.
      */
    public boolean hasInventoryId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'inventoryId' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearInventoryId() {
      inventoryId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'warehouseId' field.
      * @return The value.
      */
    public java.util.UUID getWarehouseId() {
      return warehouseId;
    }


    /**
      * Sets the value of the 'warehouseId' field.
      * @param value The value of 'warehouseId'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setWarehouseId(java.util.UUID value) {
      validate(fields()[2], value);
      this.warehouseId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'warehouseId' field has been set.
      * @return True if the 'warehouseId' field has been set, false otherwise.
      */
    public boolean hasWarehouseId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'warehouseId' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearWarehouseId() {
      warehouseId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setActive(boolean value) {
      validate(fields()[3], value);
      this.active = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearActive() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productStocks' field.
      * @return The value.
      */
    public java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> getProductStocks() {
      return productStocks;
    }


    /**
      * Sets the value of the 'productStocks' field.
      * @param value The value of 'productStocks'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setProductStocks(java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel> value) {
      validate(fields()[4], value);
      this.productStocks = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productStocks' field has been set.
      * @return True if the 'productStocks' field has been set, false otherwise.
      */
    public boolean hasProductStocks() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productStocks' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearProductStocks() {
      productStocks = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'actionType' field.
      * @return The value.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.ActionType getActionType() {
      return actionType;
    }


    /**
      * Sets the value of the 'actionType' field.
      * @param value The value of 'actionType'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setActionType(com.multiwarehouse.app.kafka.inventory.avro.model.ActionType value) {
      validate(fields()[5], value);
      this.actionType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'actionType' field has been set.
      * @return True if the 'actionType' field has been set, false otherwise.
      */
    public boolean hasActionType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'actionType' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearActionType() {
      actionType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[6], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.multiwarehouse.app.kafka.inventory.avro.model.InventoryChangeAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InventoryChangeAvroModel build() {
      try {
        InventoryChangeAvroModel record = new InventoryChangeAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.inventoryId = fieldSetFlags()[1] ? this.inventoryId : (java.util.UUID) defaultValue(fields()[1]);
        record.warehouseId = fieldSetFlags()[2] ? this.warehouseId : (java.util.UUID) defaultValue(fields()[2]);
        record.active = fieldSetFlags()[3] ? this.active : (java.lang.Boolean) defaultValue(fields()[3]);
        record.productStocks = fieldSetFlags()[4] ? this.productStocks : (java.util.List<com.multiwarehouse.app.kafka.inventory.avro.model.ProductStockChangeAvroModel>) defaultValue(fields()[4]);
        record.actionType = fieldSetFlags()[5] ? this.actionType : (com.multiwarehouse.app.kafka.inventory.avro.model.ActionType) defaultValue(fields()[5]);
        record.createdAt = fieldSetFlags()[6] ? this.createdAt : (java.time.Instant) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InventoryChangeAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<InventoryChangeAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InventoryChangeAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<InventoryChangeAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










